---
description: 
globs: 
alwaysApply: false
---
You're my coding copilot for the next 2 days. I have to build an **admin dashboard** using the following tech stack:

- **Next.js** (App Router)
- **Drizzle ORM**
- **tRPC**
- **TypeScript**
- **Tailwind CSS**
- **PostgreSQL**

The project is an internal **administrative portal** for managing **client subscriptions and billing** for a data company. The users of this portal will be **internal team members**, so login/auth is necessary.

---

### 🎯 Project Goal:

A web-based admin dashboard that lets internal staff:

1. View subscription and billing info
2. Create/update/delete subscriptions
3. Create invoices (can be stubbed as JSON output)
4. Visualize data: totals by org, product, over time

---

### 🧠 Functional Requirements:

- 🔐 **Authentication**: Oauth2 (stubbed or use Clerk/Auth0/etc.); role-based access only
- 📦 **Subscription management**: CRUD interface
- 💸 **Billing management**: Invoice generation (stubbed JSON is okay)
- 📊 **Data visualization**:
  - Totals by organization
  - Totals by product
  - Totals over time
- ⚠️ Stretch goals (optional):
  - Real invoice PDF generation + email to customer
  - Advanced visualizations

---

### 🗄️ Database Schema (Drizzle)

The key table is called `organization_to_feed`. Here's the schema:

```ts
export const organizationToFeed = pgTable("organization_to_feed", {
  id: serial("id").primaryKey().notNull(),
  createdAt: timestamp("created_at").notNull().defaultNow(),
  updatedAt: timestamp("updated_at").notNull().defaultNow().$onUpdate(() => new Date()),

  feedID: integer("feed_id").references(() => feeds.id).notNull(),
  organizationID: integer("organization_id").references(() => organizations.id).notNull(),

  accessUntil: timestamp("access_until").notNull(),
  dashboardUrl: varchar("dashboard_url", { length: 255 }),

  deliveryMethod: deliveryMethodEnum("delivery_method"),
  deliveryConfig: jsonb("delivery_config").$type<any>(),

  successEmails: text("success_emails").array(),
  failEmails: text("fail_emails").array(),
  schemaUpdateEmails: text("schema_update_emails").array(),

  billingAmount: decimal("billing_amount").notNull(),
  billingFrequency: enum("billing_frequency", ["monthly", "yearly"]),

  uniqueConstraint: unique().on(t.feedID, t.organizationID),
});
```

Assume `feeds` and `organizations` are other tables (mock or assume basic schema).

---

### 🚀 What I Want from You

Help me design and build this entire app **fast and smart**, without wasting time. You should:

1. Break this into small **atomic dev tasks** (setup, auth, UI, logic)
2. Scaffold code for each task (pages, API routes, tRPC handlers, Drizzle models)
3. Generate **sample components**, `useQuery`/`useMutation` hooks, forms, charts, etc.
4. Be clever: use mock data or stubs where needed, don't over-engineer

---

### 🔥 Constraints

- I have 2 days
- I want high-quality, minimal but impressive output
- Use Tailwind for layout and charts (e.g., Recharts or Chart.js)
- tRPC endpoints must match frontend types
- Use good file structure and clean code

---

Ready? Start by setting up the project folder and basic structure with authentication stub and Drizzle ORM configured. Then help me move step-by-step through each screen.
